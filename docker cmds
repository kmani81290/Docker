docker run -d -p --name web nginx
docker port web
docker-machine ip default

docker run -P -d nginxdemos/hello
mkdir mysite
echo "a new website: > index.html
ls
cat index.html
docker run -d pP -v $HOME/mysite:/usr/share/nginx/html \
> --name mysite nginx

103  cd $HOME
  104  ls
  105  mkdir mysite
  106  ls
  107  cd mysite
  108  ls
  109  echo "a new website" > index.html
  110  cat index.html
  111  docker run -d -P -v $HOME/mysite:/usr/share/nginx/html --name mysite nginx
  112  docker port mysite
  113  docker-machine ip deafut
  114  docker-machine ip default
  115  histor
  
  
  
  ###########################################################
  
  Docker Commands:

##Run Container##
Docker run -it Centos /bin/bash
	─it is used to mention that we want to run in interactive mode.
	/bin/bash is used to run the bash shell once CentOS is up and running.
	
Displaying Docker downloaded Images
#Docker Images.
	TAG − This is used to logically tag images.
	Image ID − This is used to uniquely identify the image.
	Created − The number of days since the image was created.
	Virtual Size − The size of the image.
	
#Docker images -q
	Displays only Container-ID
	
Remove Docker Images
#docker rmi imageid

Display Docker Process

Docker ps 
Docker ps -a 



Testting1:
create 1 centos instance
#docker run -it centos
this instance upload into docker hub------pending
	steps;

tag your image

#docker images
#docker tag bbb389766d03cf yourhubusername/verse_gapminder:firsttry
#docker push yourhubusername/verse_gapminder
#docker save verse_gapminder > verse_gapminder.ar
#docer load -input verse_gapminder.tar
#########################################################################################################################################################
#############################################################################################################################################################################################################################
##########################################################################################################################################################################
26 October 2019 1:46
https://kodekloud.com/courses/docker-for-the-absolute-beginner-hands-on/lectures/4554684

#Docker run nginx          	;to download with run the images in container
#Docker pull nginx         	;to download only
#Docker ps			;List containers
#Docker ps -a 			;Running or stopped containers are also visible
#Docker stop silly_sammet	;to stop container give name or container ID
#docker rm silly_sammet		;remove container permanantly
#docker rmi nginx		;to remove image permanantly/no container to runing with the image
#docker exec silly_sammet cat /etc/hosts		;run a cmd about in the container while running.
#docker run -it centos bash				;run and enter i=in to the container
#docker run -d centos sleep 20				;run in background d=detached and shutdown in 20 secs







###############################################################################################################################
###############################################################################################################################

Docker RUN:

Run in a non interactive mode if you like to provide input run into the interactive mode  givves has a run after a  "-i"  its interactive mode
Docker run kodekloud/simple-prompt-docker

using "-t" stands for psuedo terminal, so with the combination.

PORT mapping : 

docker run -it -p 80:8080 kodekloud/simple-webapp

80--> denotes container ip (use outside)
8080 --> denotes internal ports on container

=>all traffic on [port 80 on my docker host will get routed to port 8080 inside the docker

###############################################################################################################################
###############################################################################################################################

To create my own image.

OS - Ubuntu
Update apt repo
install dependencies using apt
install python dependsies using pip
copy source code to /opt folder
run the web server using "flask" command

Dockerfile
///////////

FROM Ubuntu

RUN apt-get update
RUN apt-get install python

RUN pip install flask
RUN pip install flask-mysql

COPY . /opt/source-code

ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run


//RUN//
docker build Dockerfile -t mmumshad/my-custom-app


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Remove all images

docker container stop $(docker container ls -aq)  ----stop all 
docker container rm $(docker container ls -aq)     -----remove all
docker rmi $(docker images -q)                        ----remove images









  
